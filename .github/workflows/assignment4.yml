name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and Initialize Log File
        run: |
          touch log.txt
          echo "$(date -Iminutes)" > log.txt
          echo "Maayan Wate and May Bouarshan" >> log.txt

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Build and Start Containers
        run: docker-compose up --build -d

      - name: Debug - Check running containers
        run: docker ps -a

      - name: Debug - Show logs for stocks1
        run: docker logs stocks1 || echo "stocks1 container is not running"

      - name: Check Docker Images Existence and Log Build Success
        run: |
          if docker images -q stock-portfolio > /dev/null && docker images -q capital-gains > /dev/null; then
              echo "image successfully built" >> log.txt
          else
              echo "image not able to be built" >> log.txt
          fi

      - name: Upload Build Log File (Intermediate)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: temp_logfile_build
          path: log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Build Log File
        uses: actions/download-artifact@v4
        with:
          name: temp_logfile_build
          path: .

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Start application
        run: docker-compose up -d

      - name: Log Container Start Status
        run: |
          if docker ps | grep -q "stocks" && docker ps | grep -q "capital-gains"; then
            echo "Container up and running" >> log.txt
          else
            echo "ERROR: Containers failed to start!" >> log.txt
            docker ps -a
            exit 1
          fi

      - name: Debug - Check running containers
        run: docker ps -a

      - name: Debug - Show logs for stocks1
        run: docker logs stocks1 || echo "⚠️ stocks1 container is not running"

      - name: Debug - Show logs for capital-gains
        run: docker logs capital-gains || echo "⚠️ capital-gains container is not running"

      - name: Wait for services to be ready
        run: sleep 10

      - name: Install Python and pytest
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 -m pip install --upgrade pip
          python3 -m pip install pytest requests

      - name: Debug - Check files before running tests
        run: ls -l

      - name: Run tests
        run: python3 -m pytest -v tests/assn4_tests.py 2>&1 | tee assn4_test_results.txt

      - name: Debug - Show test results file after tests
        run: |
          ls -l assn4_test_results.txt
          cat assn4_test_results.txt || echo "⚠️ WARNING: assn4_test_results.txt is empty"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assn4_test_results
          path: assn4_test_results.txt

      - name: Shut down Docker Compose
        run: docker-compose down

      - name: Append Test Results to Log
        run: |
          if grep -q "failed" assn4_test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload Final Log File
        uses: actions/upload-artifact@v4
        with:
          name: log.txt
          path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download Final Log File
        uses: actions/download-artifact@v4
        with:
          name: log.txt
          path: .

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Start application
        run: docker-compose up -d

      - name: Debug - Check running containers
        run: docker ps -a

      - name: Debug - Show logs for stocks1
        run: docker logs stocks1 || echo "stocks1 container is not running"

      - name: Wait for Stocks Service to be Ready
        run: |
          echo "Waiting for stocks service to be available..."
          count=0
          until curl -s "http://localhost:5001/stocks" > /dev/null; do
            echo "Still waiting... Attempt $count"
            count=$((count+1))
            sleep 5
            if [ $count -eq 30 ]; then
              echo "Stocks service failed to start"
              exit 1
            fi
          done
          echo "Stocks service is ready!"

      - name: Ensure query.txt exists
        run: touch query.txt

      - name: Ensure response.txt exists
        run: rm -f response.txt && touch response.txt

      - name: Add 6 stock entries before queries
        run: |
          stocks=(
            '{"name":"NVIDIA Corporation","symbol":"NVDA","purchase price":134.66,"purchase date":"2024-06-18","shares":7}'
            '{"name":"Apple Inc.","symbol":"AAPL","purchase price":183.63,"purchase date":"2024-02-22","shares":19}'
            '{"name":"Alphabet Inc.","symbol":"GOOG","purchase price":140.12,"purchase date":"2024-10-24","shares":14}'
            '{"name":"Tesla Inc.","symbol":"TSLA","purchase price":250.75,"purchase date":"2024-01-01","shares":5}'
            '{"name":"Microsoft Corp.","symbol":"MSFT","purchase price":299.99,"purchase date":"2024-05-15","shares":8}'
            '{"name":"Amazon.com Inc.","symbol":"AMZN","purchase price":320.45,"purchase date":"2024-03-12","shares":12}'
          )
          for stock in "${stocks[@]}"; do
            echo "Posting: $stock"
            response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "http://localhost:5001/stocks" -H "Content-Type: application/json" -d "$stock")
            if [ "$response" -ne 201 ]; then
              echo "Failed to add stock: $stock (HTTP $response)"
              exit 1
            fi
            sleep 1
          done

      - name: Execute queries from query.txt
        run: |
          while IFS= read -r line; do
            service=$(echo "$line" | cut -d':' -f1)
            query=$(echo "$line" | cut -d':' -f2-)
            if [ "$service" = "stocks" ]; then
              response=$(curl -s "http://localhost:5001/stocks?$query")
            elif [ "$service" = "capital-gains" ]; then
              response=$(curl -s "http://localhost:5003/capital-gains?$query")
            else
              response="Invalid service name"
            fi
            echo "query: $line" >> response.txt
            echo "response: $response" >> response.txt
          done < query.txt

      - name: Upload query results
        uses: actions/upload-artifact@v4
        with:
          name: query-results
          path: response.txt

      - name: Shut down Docker Compose
        run: docker-compose down
