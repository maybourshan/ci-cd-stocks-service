name: assignment4

on:
  workflow_dispatch:  # הפעלה ידנית דרך GitHub

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log Start Time
        run: |
          echo "Start time: $(date -Iminutes)" > log.txt

      - name: Add submitter name
        run: |
          echo "Submitters: Maayan Wate, May Bouarshan" >> log.txt

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Build and Start Containers
        run: docker-compose up --build -d

      - name: Check running containers
        run: docker ps -a

      - name: Log build success
        run: echo "image successfully built" >> log.txt

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Start application
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: sleep 10

      - name: Run tests
        run: pytest -v tests/assn4_tests.py | tee test_results.txt

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_results
          path: test_results.txt

      - name: Update log file
        run: |
          if grep -q "FAILED" test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi

      - name: Upload updated log file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt
          overwrite: true

      - name: Shut down Docker Compose
        run: docker-compose down

  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker --version
          docker-compose --version

      - name: Start application
        run: docker-compose up -d

      - name: Wait for MongoDB to be Ready
        run: |
          echo "Waiting for MongoDB to be available..."
          while ! nc -z localhost 27017; do
            echo "Still waiting for MongoDB..."
            sleep 3
          done
          echo "MongoDB is ready!"

      - name: Wait for Stocks Service to be Ready
        run: |
          echo "Waiting for stocks service to be available..."
          until curl -s "http://localhost:5001/stocks" > /dev/null; do
            echo "Still waiting for stocks service..."
            sleep 3
          done
          echo "Stocks service is ready!"

      - name: Ensure query.txt exists
        run: |
          if [ ! -f query.txt ]; then
            echo "query.txt is missing! Creating a placeholder." > query.txt
          fi

      - name: Ensure response.txt exists
        run: |
          rm -f response.txt
          touch response.txt

      - name: Add 6 stock entries before queries
        run: |
          echo "Adding test stocks..."
          for stock in '{"name":"NVIDIA Corporation","symbol":"NVDA","purchase price":134.66,"purchase date":"18-06-2024","shares":7}' \
                       '{"name":"Apple Inc.","symbol":"AAPL","purchase price":183.63,"purchase date":"22-02-2024","shares":19}' \
                       '{"name":"Alphabet Inc.","symbol":"GOOG","purchase price":140.12,"purchase date":"24-10-2024","shares":14}' \
                       '{"name":"Tesla, Inc.","symbol":"TSLA","purchase price":194.58,"purchase date":"28-11-2022","shares":32}' \
                       '{"name":"Microsoft Corporation","symbol":"MSFT","purchase price":420.55,"purchase date":"09-02-2024","shares":35}' \
                       '{"name":"Intel Corporation","symbol":"INTC","purchase price":19.15,"purchase date":"13-01-2025","shares":10}'; do
            curl -X POST "http://localhost:5001/stocks" -H "Content-Type: application/json" -d "$stock" || echo "Failed to add stock: $stock"
            sleep 1
          done

      - name: Execute queries from query.txt
        run: |
          while IFS= read -r line; do
            service=$(echo "$line" | cut -d':' -f1)
            query=$(echo "$line" | cut -d':' -f2-)

            if [ "$service" = "stocks" ]; then
              response=$(curl -s "http://localhost:5001/stocks?$query")
            elif [ "$service" = "capital-gains" ]; then
              response=$(curl -s "http://localhost:5003/capital-gains?$query")
            else
              response="Invalid service name"
            fi

            echo "query: $line" >> response.txt
            echo "response: $response" >> response.txt
          done < query.txt

      - name: Upload query results
        uses: actions/upload-artifact@v4
        with:
          name: query-results
          path: response.txt

      - name: Shut down Docker Compose
        run: docker-compose down
